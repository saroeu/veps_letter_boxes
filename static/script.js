document.addEventListener('DOMContentLoaded', () => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
    console.log('Letter Boxed Game Initializing...');

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ—Å–∫–∏
    const boardData = JSON.parse(document.getElementById('board-data').textContent);
    console.log('Board data loaded:', boardData);

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ—Å–∫–∏ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –∏ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞)
    const board = boardData.map(side => side.map(letter => {
        return typeof letter === 'object' ? letter.char : letter;
    }));
    console.log('Normalized board:', board);

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    const gameState = {
        selectedLetters: [],    // {letter, side, element}
        usedWords: [],
        usedLetters: new Set(), // –í—Å–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –±—É–∫–≤—ã
        lastLetter: null,       // –ü–æ—Å–ª–µ–¥–Ω—è—è –±—É–∫–≤–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–ª–æ–≤–∞
        locked: false           // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤–æ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–π
    };

    // DOM —ç–ª–µ–º–µ–Ω—Ç—ã
    const elements = {
        currentWord: document.getElementById('current-word'),
        messageBox: document.getElementById('message-box'),
        wordCount: document.getElementById('word-count'),
        lettersCount: document.getElementById('letters-count'),
        usedWords: document.getElementById('used-words'),
        submitBtn: document.getElementById('submit-word'),
        deleteBtn: document.getElementById('delete-btn'),
        shuffleBtn: document.getElementById('shuffle-btn'),
        letterElements: Array.from(document.querySelectorAll('.letter'))
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—É–∫–≤
    function initializeLetters() {
        elements.letterElements.forEach((el, index) => {
            const sideIdx = Math.floor(index / 3);
            const letterIdx = index % 3;
            const letter = board[sideIdx][letterIdx];

            el.dataset.letter = letter;
            el.dataset.side = sideIdx;
            el.textContent = letter;
            el.classList.remove('selected', 'disabled');

            el.addEventListener('click', () => !gameState.locked && handleLetterClick(el));
        });
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –±—É–∫–≤–µ
    function handleLetterClick(letterEl) {
        const letter = letterEl.dataset.letter;
        const side = parseInt(letterEl.dataset.side);

        // –ï—Å–ª–∏ –±—É–∫–≤–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞
        const existingIndex = gameState.selectedLetters.findIndex(
            l => l.element === letterEl
        );

        if (existingIndex >= 0) {
            unselectLetter(existingIndex);
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª –∏–≥—Ä—ã
        if (gameState.selectedLetters.length > 0) {
            const lastSelected = gameState.selectedLetters[gameState.selectedLetters.length - 1];

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ—Ä–æ–Ω—ã
            if (lastSelected.side === side) {
                showMessage('–ë—É–∫–≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å —Ä–∞–∑–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω!', 'error');
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –±—É–∫–≤—ã
            if (lastSelected.letter === letter) {
                showMessage('–ù–µ–ª—å–∑—è –≤—ã–±–∏—Ä–∞—Ç—å —Ç—É –∂–µ –±—É–∫–≤—É –ø–æ–¥—Ä—è–¥!', 'error');
                return;
            }
        }

        selectLetter(letterEl, letter, side);
    }

    function selectLetter(letterEl, letter, side) {
        letterEl.classList.add('selected');
        gameState.selectedLetters.push({ letter, side, element: letterEl });
        updateCurrentWord();
    }

    function unselectLetter(index) {
        const { element } = gameState.selectedLetters[index];
        element.classList.remove('selected');
        gameState.selectedLetters.splice(index, 1);
        updateCurrentWord();
    }

    function updateCurrentWord() {
        elements.currentWord.textContent = gameState.selectedLetters
            .map(item => item.letter)
            .join(' ');
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–æ–≤–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
    async function submitWord() {
        if (gameState.locked) return;

        const word = gameState.selectedLetters.map(l => l.letter).join('');

        if (word.length < 3) {
            showMessage('–ú–∏–Ω–∏–º—É–º 3 –±—É–∫–≤—ã!', 'error');
            return;
        }

        gameState.locked = true;

        try {
            const response = await fetch('/check_word', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    word,
                    board,
                    last_letter: gameState.lastLetter
                })
            });

            const result = await response.json();

            if (result.valid) {
                await processValidWord(word, result.last_letter);
            } else {
                showMessage(result.message, 'error');
                await highlightError();
            }
        } catch (error) {
            console.error('Submission error:', error);
            showMessage('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', 'error');
        } finally {
            gameState.locked = false;
        }
    }

    async function processValidWord(word, lastLetter) {
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –≤ –∏—Å—Ç–æ—Ä–∏—é
        gameState.usedWords.push(word);
        gameState.lastLetter = lastLetter;

        // –î–æ–±–∞–≤–ª—è–µ–º –±—É–∫–≤—ã –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ
        word.split('').forEach(l => gameState.usedLetters.add(l));

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
        showMessage('‚úì –°–ª–æ–≤–æ –ø—Ä–∏–Ω—è—Ç–æ!', 'success');

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
        resetSelection();

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        updateStats();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É
        if (gameState.usedLetters.size === 9) {
            await showWinMessage();
        }
    }

    function resetSelection() {
        gameState.selectedLetters.forEach(({ element }) => {
            element.classList.remove('selected');
        });
        gameState.selectedLetters = [];
        elements.currentWord.textContent = '';
    }

    function updateStats() {
        elements.wordCount.textContent = gameState.usedWords.length;
        elements.lettersCount.textContent = gameState.usedLetters.size;
        elements.usedWords.textContent = gameState.usedWords.join(', ');
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –±—É–∫–≤—ã
    function deleteLastLetter() {
        if (gameState.locked || gameState.selectedLetters.length === 0) return;
        unselectLetter(gameState.selectedLetters.length - 1);
    }

    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –±—É–∫–≤
    function shuffleLetters() {
        if (gameState.locked) return;

        gameState.locked = true;

        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –±—É–∫–≤—ã
        const allLetters = board.flat();

        // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º
        for (let i = allLetters.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [allLetters[i], allLetters[j]] = [allLetters[j], allLetters[i]];
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å–∫—É
        let index = 0;
        board.forEach((side, sideIdx) => {
            side.forEach((_, letterIdx) => {
                board[sideIdx][letterIdx] = allLetters[index++];
            });
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º DOM
        initializeLetters();
        resetSelection();

        gameState.locked = false;
        console.log('Letters shuffled:', board);
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ UI
    function showMessage(text, type) {
        elements.messageBox.textContent = text;
        elements.messageBox.className = `message ${type}`;

        if (type === 'error') {
            setTimeout(() => {
                elements.messageBox.textContent = '';
                elements.messageBox.className = 'message';
            }, 3000);
        }
    }

    async function highlightError() {
        elements.currentWord.classList.add('error');
        await new Promise(resolve => setTimeout(resolve, 500));
        elements.currentWord.classList.remove('error');
    }

    async function showWinMessage() {
        await new Promise(resolve => setTimeout(resolve, 500));
        showMessage(`üéâ –ü–æ–±–µ–¥–∞! –°–ª–æ–≤: ${gameState.usedWords.length}`, 'success');
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
    initializeLetters();

    // –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    elements.submitBtn.addEventListener('click', submitWord);
    elements.deleteBtn.addEventListener('click', deleteLastLetter);
    elements.shuffleBtn.addEventListener('click', shuffleLetters);

    console.log('Game initialized successfully');
});